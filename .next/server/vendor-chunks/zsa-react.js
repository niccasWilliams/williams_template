"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zsa-react";
exports.ids = ["vendor-chunks/zsa-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/zsa-react/dist/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/zsa-react/dist/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useServerAction: () => (/* binding */ useServerAction)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ useServerAction auto */ // src/index.ts\n\n// src/optimistic.ts\nvar evaluateOptimisticInput = (fn, oldResult, result)=>{\n    function isFunction(value) {\n        return typeof value === \"function\";\n    }\n    return isFunction(fn) ? fn(oldResult.status === \"empty\" ? result.data : oldResult.result.data) : fn;\n};\n// src/results.ts\nvar calculateResultFromState = (state)=>{\n    const { isPending, oldResult, result } = state;\n    if (isPending && oldResult.status === \"empty\") {\n        return {\n            isPending: true,\n            isOptimistic: false,\n            data: state.persistDataWhilePending ? result.data : void 0,\n            isError: false,\n            error: state.persistErrorWhilePending ? result.error : void 0,\n            isSuccess: false,\n            status: \"pending\"\n        };\n    } else if (isPending && oldResult.status === \"filled\" && result.status === \"success\") {\n        return {\n            isPending: true,\n            isOptimistic: true,\n            data: result.data,\n            isError: false,\n            error: void 0,\n            isSuccess: false,\n            status: \"pending\"\n        };\n    } else if (result.status === \"success\") {\n        return {\n            isPending: false,\n            isOptimistic: false,\n            data: result.data,\n            isError: false,\n            error: void 0,\n            isSuccess: true,\n            status: \"success\"\n        };\n    } else if (result.status === \"error\") {\n        return {\n            isPending: false,\n            data: void 0,\n            isError: true,\n            error: result.error,\n            isOptimistic: false,\n            isSuccess: false,\n            status: \"error\"\n        };\n    } else {\n        return {\n            isPending: false,\n            data: void 0,\n            isOptimistic: false,\n            isError: false,\n            error: void 0,\n            isSuccess: false,\n            status: \"idle\"\n        };\n    }\n};\nvar getEmptyResult = (initialData)=>initialData === void 0 ? // if there is no initial data\n    {\n        status: \"idle\",\n        error: void 0,\n        data: void 0\n    } : {\n        // if there is initial data\n        status: \"success\",\n        error: void 0,\n        data: initialData\n    };\nvar getEmptyOldResult = ()=>({\n        status: \"empty\",\n        result: void 0\n    });\n// src/retries.ts\nvar getRetryDelay = (retryConfig, retryCount, err)=>{\n    const shouldRetry = retryConfig ? retryCount + 1 < retryConfig.maxAttempts : false;\n    let retryDelay = 0;\n    const retryDelayOpt = retryConfig?.delay;\n    if (retryDelayOpt && typeof retryDelayOpt === \"function\") {\n        retryDelay = retryDelayOpt(retryCount + 1, err);\n    } else if (retryDelayOpt && typeof retryDelayOpt === \"number\") {\n        retryDelay = retryDelayOpt;\n    }\n    if (!shouldRetry) return -1;\n    return retryDelay;\n};\n// src/utils.ts\nvar mergePossibleObjects = (obj1, obj2)=>{\n    if (obj1 === void 0 && obj2 === void 0) {\n        return void 0;\n    }\n    if (obj1 === void 0) return obj2;\n    if (obj2 === void 0) return obj1;\n    if (typeof obj1 !== \"object\" || typeof obj2 !== \"object\") {\n        return obj2;\n    }\n    return {\n        ...obj1,\n        ...obj2\n    };\n};\n// src/index.ts\nvar useServerAction = (serverAction, opts)=>{\n    const initialData = opts?.initialData;\n    const bindArgs = opts?.bind;\n    const [result, $setResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getEmptyResult(initialData));\n    const resultRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getEmptyResult(initialData));\n    const [oldResult, $setOldResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getEmptyOldResult());\n    const oldResultRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getEmptyOldResult());\n    const lastRetryId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const retryCount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const executeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const [isTransitioning, startTransition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    const [isExecuting, setExecuting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const status = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"idle\");\n    const setResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((result2)=>{\n        $setResult(result2);\n        resultRef.current = result2;\n    }, []);\n    const setOldResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((oldResult2)=>{\n        $setOldResult(oldResult2);\n        oldResultRef.current = oldResult2;\n    }, []);\n    const internalExecute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (input, overrideData, args)=>{\n        const { isFromRetryId } = args || {};\n        if (isFromRetryId && lastRetryId.current !== isFromRetryId) {\n            return [\n                null,\n                {\n                    message: \"Could not successfully execute the server action\",\n                    data: \"Could not successfully execute the server action\",\n                    stack: \"\",\n                    name: \"ZSAError\",\n                    code: \"ERROR\"\n                }\n            ];\n        }\n        if (!isFromRetryId) {\n            retryCount.current = 0;\n        }\n        const retryId = Math.floor(Math.random() * 1e4);\n        lastRetryId.current = retryId;\n        if (opts?.onStart) opts.onStart();\n        status.current = \"pending\";\n        setExecuting(true);\n        let data, err;\n        await serverAction(input, overrideData).then((response)=>{\n            if (response) {\n                ;\n                [data, err] = response;\n            }\n        });\n        if (err) {\n            let retryDelay = getRetryDelay(opts?.retry, retryCount.current, err);\n            if (retryDelay >= 0) {\n                retryCount.current += 1;\n                return await new Promise((resolve)=>setTimeout(()=>{\n                        internalExecute(input, overrideData, {\n                            ...args || {},\n                            isFromRetryId: retryId\n                        }).then(resolve);\n                    }, retryDelay));\n            }\n            if (oldResult.status === \"filled\") {\n                setResult(oldResult.result);\n            } else {\n                setResult({\n                    error: err,\n                    data: void 0,\n                    status: \"error\"\n                });\n            }\n            setOldResult({\n                status: \"empty\",\n                result: void 0\n            });\n            status.current = \"error\";\n            setExecuting(false);\n            return [\n                data,\n                err\n            ];\n        }\n        const res = {\n            error: void 0,\n            data: data ?? void 0,\n            status: \"success\"\n        };\n        setResult(res);\n        setOldResult({\n            status: \"empty\",\n            result: void 0\n        });\n        status.current = \"success\";\n        setExecuting(false);\n        return [\n            data,\n            err\n        ];\n    }, [\n        serverAction\n    ]);\n    const execute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (...opts2)=>{\n        return await new Promise((resolve)=>{\n            executeRef.current = resolve;\n            startTransition(()=>{\n                internalExecute(opts2[0], mergePossibleObjects(bindArgs, opts2[1]));\n            });\n        });\n    }, [\n        internalExecute\n    ]);\n    const executeFormAction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (...opts2)=>{\n        return await new Promise((resolve)=>{\n            startTransition(()=>{\n                internalExecute(opts2[0], bindArgs);\n            });\n            executeRef.current = resolve;\n            resolve(null);\n        });\n    }, [\n        internalExecute\n    ]);\n    const setOptimistic = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fn)=>{\n        const data = evaluateOptimisticInput(fn, oldResultRef.current, resultRef.current);\n        if (oldResult.status === \"empty\") {\n            setOldResult({\n                status: \"filled\",\n                result: {\n                    ...result\n                }\n            });\n        }\n        setResult({\n            error: void 0,\n            data: data ?? void 0,\n            status: \"success\"\n        });\n    }, [\n        execute\n    ]);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setResult(getEmptyResult());\n        setOldResult(getEmptyOldResult());\n        setExecuting(false);\n        status.current = \"idle\";\n        lastRetryId.current = 0;\n        retryCount.current = 0;\n    }, []);\n    const isRunningCallbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const handleCallbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!executeRef.current || isRunningCallbacks.current) {\n            return;\n        }\n        isRunningCallbacks.current = true;\n        if (status.current === \"success\") {\n            executeRef.current?.([\n                resultRef.current.data,\n                null\n            ]);\n            opts?.onSuccess?.({\n                data: resultRef.current.data\n            });\n            opts?.onFinish?.([\n                resultRef.current.data,\n                null\n            ]);\n        }\n        if (status.current === \"error\") {\n            executeRef.current?.([\n                null,\n                resultRef.current.error\n            ]);\n            opts?.onError?.({\n                err: resultRef.current.error\n            });\n            opts?.onFinish?.([\n                null,\n                resultRef.current.error\n            ]);\n        }\n        executeRef.current = void 0;\n        status.current = \"idle\";\n        isRunningCallbacks.current = false;\n    }, []);\n    const isPending = isTransitioning || isExecuting;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isPending) return;\n        handleCallbacks();\n    }, [\n        status.current,\n        isPending\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (executeRef.current !== void 0) {\n                handleCallbacks();\n            }\n        };\n    }, []);\n    const final = calculateResultFromState({\n        isPending,\n        oldResult,\n        result: resultRef.current,\n        persistDataWhilePending: opts?.persistDataWhilePending,\n        persistErrorWhilePending: opts?.persistErrorWhilePending\n    });\n    return {\n        ...final,\n        reset,\n        execute,\n        setOptimistic,\n        executeFormAction\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvenNhLXJlYWN0L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O3FFQUVBLGVBQWU7QUFDaUU7QUFFaEYsb0JBQW9CO0FBQ3BCLElBQUlLLDBCQUEwQixDQUFDQyxJQUFJQyxXQUFXQztJQUM1QyxTQUFTQyxXQUFXQyxLQUFLO1FBQ3ZCLE9BQU8sT0FBT0EsVUFBVTtJQUMxQjtJQUNBLE9BQU9ELFdBQVdILE1BQU1BLEdBQUdDLFVBQVVJLE1BQU0sS0FBSyxVQUFVSCxPQUFPSSxJQUFJLEdBQUdMLFVBQVVDLE1BQU0sQ0FBQ0ksSUFBSSxJQUFJTjtBQUNuRztBQUVBLGlCQUFpQjtBQUNqQixJQUFJTywyQkFBMkIsQ0FBQ0M7SUFDOUIsTUFBTSxFQUFFQyxTQUFTLEVBQUVSLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEdBQUdNO0lBQ3pDLElBQUlDLGFBQWFSLFVBQVVJLE1BQU0sS0FBSyxTQUFTO1FBQzdDLE9BQU87WUFDTEksV0FBVztZQUNYQyxjQUFjO1lBQ2RKLE1BQU1FLE1BQU1HLHVCQUF1QixHQUFHVCxPQUFPSSxJQUFJLEdBQUcsS0FBSztZQUN6RE0sU0FBUztZQUNUQyxPQUFPTCxNQUFNTSx3QkFBd0IsR0FBR1osT0FBT1csS0FBSyxHQUFHLEtBQUs7WUFDNURFLFdBQVc7WUFDWFYsUUFBUTtRQUNWO0lBQ0YsT0FBTyxJQUFJSSxhQUFhUixVQUFVSSxNQUFNLEtBQUssWUFBWUgsT0FBT0csTUFBTSxLQUFLLFdBQVc7UUFDcEYsT0FBTztZQUNMSSxXQUFXO1lBQ1hDLGNBQWM7WUFDZEosTUFBTUosT0FBT0ksSUFBSTtZQUNqQk0sU0FBUztZQUNUQyxPQUFPLEtBQUs7WUFDWkUsV0FBVztZQUNYVixRQUFRO1FBQ1Y7SUFDRixPQUFPLElBQUlILE9BQU9HLE1BQU0sS0FBSyxXQUFXO1FBQ3RDLE9BQU87WUFDTEksV0FBVztZQUNYQyxjQUFjO1lBQ2RKLE1BQU1KLE9BQU9JLElBQUk7WUFDakJNLFNBQVM7WUFDVEMs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QU1nRCxVQUFVO2dCQUNkM0QsS0FBS2UsVUFBVVcsT0FBTyxDQUFDbkMsS0FBSztZQUM5QjtZQUNBb0IsTUFBTStDLFdBQVc7Z0JBQUM7Z0JBQU0zQyxVQUFVVyxPQUFPLENBQUNuQyxLQUFLO2FBQUM7UUFDbEQ7UUFDQTRCLFdBQVdPLE9BQU8sR0FBRyxLQUFLO1FBQzFCM0MsT0FBTzJDLE9BQU8sR0FBRztRQUNqQjZCLG1CQUFtQjdCLE9BQU8sR0FBRztJQUMvQixHQUFHLEVBQUU7SUFDTCxNQUFNdkMsWUFBWWlDLG1CQUFtQkU7SUFDckNqRCxnREFBU0EsQ0FBQztRQUNSLElBQUljLFdBQ0Y7UUFDRnFFO0lBQ0YsR0FBRztRQUFDekUsT0FBTzJDLE9BQU87UUFBRXZDO0tBQVU7SUFDOUJkLGdEQUFTQSxDQUFDO1FBQ1IsT0FBTztZQUNMLElBQUk4QyxXQUFXTyxPQUFPLEtBQUssS0FBSyxHQUFHO2dCQUNqQzhCO1lBQ0Y7UUFDRjtJQUNGLEdBQUcsRUFBRTtJQUNMLE1BQU1JLFFBQVEzRSx5QkFBeUI7UUFDckNFO1FBQ0FSO1FBQ0FDLFFBQVFtQyxVQUFVVyxPQUFPO1FBQ3pCckMseUJBQXlCc0IsTUFBTXRCO1FBQy9CRywwQkFBMEJtQixNQUFNbkI7SUFDbEM7SUFDQSxPQUFPO1FBQ0wsR0FBR29FLEtBQUs7UUFDUk47UUFDQUo7UUFDQUc7UUFDQUQ7SUFDRjtBQUNGO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0X3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3pzYS1yZWFjdC9kaXN0L2luZGV4Lm1qcz9mZjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZVRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL29wdGltaXN0aWMudHNcbnZhciBldmFsdWF0ZU9wdGltaXN0aWNJbnB1dCA9IChmbiwgb2xkUmVzdWx0LCByZXN1bHQpID0+IHtcbiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxuICByZXR1cm4gaXNGdW5jdGlvbihmbikgPyBmbihvbGRSZXN1bHQuc3RhdHVzID09PSBcImVtcHR5XCIgPyByZXN1bHQuZGF0YSA6IG9sZFJlc3VsdC5yZXN1bHQuZGF0YSkgOiBmbjtcbn07XG5cbi8vIHNyYy9yZXN1bHRzLnRzXG52YXIgY2FsY3VsYXRlUmVzdWx0RnJvbVN0YXRlID0gKHN0YXRlKSA9PiB7XG4gIGNvbnN0IHsgaXNQZW5kaW5nLCBvbGRSZXN1bHQsIHJlc3VsdCB9ID0gc3RhdGU7XG4gIGlmIChpc1BlbmRpbmcgJiYgb2xkUmVzdWx0LnN0YXR1cyA9PT0gXCJlbXB0eVwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUGVuZGluZzogdHJ1ZSxcbiAgICAgIGlzT3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICBkYXRhOiBzdGF0ZS5wZXJzaXN0RGF0YVdoaWxlUGVuZGluZyA/IHJlc3VsdC5kYXRhIDogdm9pZCAwLFxuICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgICBlcnJvcjogc3RhdGUucGVyc2lzdEVycm9yV2hpbGVQZW5kaW5nID8gcmVzdWx0LmVycm9yIDogdm9pZCAwLFxuICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCJcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzUGVuZGluZyAmJiBvbGRSZXN1bHQuc3RhdHVzID09PSBcImZpbGxlZFwiICYmIHJlc3VsdC5zdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUGVuZGluZzogdHJ1ZSxcbiAgICAgIGlzT3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCJcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUGVuZGluZzogZmFsc2UsXG4gICAgICBpc09wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICBpc1N1Y2Nlc3M6IHRydWUsXG4gICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiXG4gICAgfTtcbiAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImVycm9yXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgIGlzRXJyb3I6IHRydWUsXG4gICAgICBlcnJvcjogcmVzdWx0LmVycm9yLFxuICAgICAgaXNPcHRpbWlzdGljOiBmYWxzZSxcbiAgICAgIGlzU3VjY2VzczogZmFsc2UsXG4gICAgICBzdGF0dXM6IFwiZXJyb3JcIlxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUGVuZGluZzogZmFsc2UsXG4gICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICBpc09wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogXCJpZGxlXCJcbiAgICB9O1xuICB9XG59O1xudmFyIGdldEVtcHR5UmVzdWx0ID0gKGluaXRpYWxEYXRhKSA9PiBpbml0aWFsRGF0YSA9PT0gdm9pZCAwID8gKFxuICAvLyBpZiB0aGVyZSBpcyBubyBpbml0aWFsIGRhdGFcbiAge1xuICAgIHN0YXR1czogXCJpZGxlXCIsXG4gICAgZXJyb3I6IHZvaWQgMCxcbiAgICBkYXRhOiB2b2lkIDBcbiAgfVxuKSA6IHtcbiAgLy8gaWYgdGhlcmUgaXMgaW5pdGlhbCBkYXRhXG4gIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gIGVycm9yOiB2b2lkIDAsXG4gIGRhdGE6IGluaXRpYWxEYXRhXG59O1xudmFyIGdldEVtcHR5T2xkUmVzdWx0ID0gKCkgPT4gKHtcbiAgc3RhdHVzOiBcImVtcHR5XCIsXG4gIHJlc3VsdDogdm9pZCAwXG59KTtcblxuLy8gc3JjL3JldHJpZXMudHNcbnZhciBnZXRSZXRyeURlbGF5ID0gKHJldHJ5Q29uZmlnLCByZXRyeUNvdW50LCBlcnIpID0+IHtcbiAgY29uc3Qgc2hvdWxkUmV0cnkgPSByZXRyeUNvbmZpZyA/IHJldHJ5Q291bnQgKyAxIDwgcmV0cnlDb25maWcubWF4QXR0ZW1wdHMgOiBmYWxzZTtcbiAgbGV0IHJldHJ5RGVsYXkgPSAwO1xuICBjb25zdCByZXRyeURlbGF5T3B0ID0gcmV0cnlDb25maWc/LmRlbGF5O1xuICBpZiAocmV0cnlEZWxheU9wdCAmJiB0eXBlb2YgcmV0cnlEZWxheU9wdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0cnlEZWxheSA9IHJldHJ5RGVsYXlPcHQocmV0cnlDb3VudCArIDEsIGVycik7XG4gIH0gZWxzZSBpZiAocmV0cnlEZWxheU9wdCAmJiB0eXBlb2YgcmV0cnlEZWxheU9wdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHJ5RGVsYXkgPSByZXRyeURlbGF5T3B0O1xuICB9XG4gIGlmICghc2hvdWxkUmV0cnkpXG4gICAgcmV0dXJuIC0xO1xuICByZXR1cm4gcmV0cnlEZWxheTtcbn07XG5cbi8vIHNyYy91dGlscy50c1xudmFyIG1lcmdlUG9zc2libGVPYmplY3RzID0gKG9iajEsIG9iajIpID0+IHtcbiAgaWYgKG9iajEgPT09IHZvaWQgMCAmJiBvYmoyID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmIChvYmoxID09PSB2b2lkIDApXG4gICAgcmV0dXJuIG9iajI7XG4gIGlmIChvYmoyID09PSB2b2lkIDApXG4gICAgcmV0dXJuIG9iajE7XG4gIGlmICh0eXBlb2Ygb2JqMSAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqMiAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBvYmoyO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4ub2JqMSxcbiAgICAuLi5vYmoyXG4gIH07XG59O1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciB1c2VTZXJ2ZXJBY3Rpb24gPSAoc2VydmVyQWN0aW9uLCBvcHRzKSA9PiB7XG4gIGNvbnN0IGluaXRpYWxEYXRhID0gb3B0cz8uaW5pdGlhbERhdGE7XG4gIGNvbnN0IGJpbmRBcmdzID0gb3B0cz8uYmluZDtcbiAgY29uc3QgW3Jlc3VsdCwgJHNldFJlc3VsdF0gPSB1c2VTdGF0ZShcbiAgICBnZXRFbXB0eVJlc3VsdChpbml0aWFsRGF0YSlcbiAgKTtcbiAgY29uc3QgcmVzdWx0UmVmID0gdXNlUmVmKFxuICAgIGdldEVtcHR5UmVzdWx0KGluaXRpYWxEYXRhKVxuICApO1xuICBjb25zdCBbb2xkUmVzdWx0LCAkc2V0T2xkUmVzdWx0XSA9IHVzZVN0YXRlKGdldEVtcHR5T2xkUmVzdWx0KCkpO1xuICBjb25zdCBvbGRSZXN1bHRSZWYgPSB1c2VSZWYoZ2V0RW1wdHlPbGRSZXN1bHQoKSk7XG4gIGNvbnN0IGxhc3RSZXRyeUlkID0gdXNlUmVmKDApO1xuICBjb25zdCByZXRyeUNvdW50ID0gdXNlUmVmKDApO1xuICBjb25zdCBleGVjdXRlUmVmID0gdXNlUmVmKCk7XG4gIGNvbnN0IFtpc1RyYW5zaXRpb25pbmcsIHN0YXJ0VHJhbnNpdGlvbl0gPSB1c2VUcmFuc2l0aW9uKCk7XG4gIGNvbnN0IFtpc0V4ZWN1dGluZywgc2V0RXhlY3V0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgc3RhdHVzID0gdXNlUmVmKFwiaWRsZVwiKTtcbiAgY29uc3Qgc2V0UmVzdWx0ID0gdXNlQ2FsbGJhY2soKHJlc3VsdDIpID0+IHtcbiAgICAkc2V0UmVzdWx0KHJlc3VsdDIpO1xuICAgIHJlc3VsdFJlZi5jdXJyZW50ID0gcmVzdWx0MjtcbiAgfSwgW10pO1xuICBjb25zdCBzZXRPbGRSZXN1bHQgPSB1c2VDYWxsYmFjaygob2xkUmVzdWx0MikgPT4ge1xuICAgICRzZXRPbGRSZXN1bHQob2xkUmVzdWx0Mik7XG4gICAgb2xkUmVzdWx0UmVmLmN1cnJlbnQgPSBvbGRSZXN1bHQyO1xuICB9LCBbXSk7XG4gIGNvbnN0IGludGVybmFsRXhlY3V0ZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChpbnB1dCwgb3ZlcnJpZGVEYXRhLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCB7IGlzRnJvbVJldHJ5SWQgfSA9IGFyZ3MgfHwge307XG4gICAgICBpZiAoaXNGcm9tUmV0cnlJZCAmJiBsYXN0UmV0cnlJZC5jdXJyZW50ICE9PSBpc0Zyb21SZXRyeUlkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBcIkNvdWxkIG5vdCBzdWNjZXNzZnVsbHkgZXhlY3V0ZSB0aGUgc2VydmVyIGFjdGlvblwiLFxuICAgICAgICAgICAgZGF0YTogXCJDb3VsZCBub3Qgc3VjY2Vzc2Z1bGx5IGV4ZWN1dGUgdGhlIHNlcnZlciBhY3Rpb25cIixcbiAgICAgICAgICAgIHN0YWNrOiBcIlwiLFxuICAgICAgICAgICAgbmFtZTogXCJaU0FFcnJvclwiLFxuICAgICAgICAgICAgY29kZTogXCJFUlJPUlwiXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0Zyb21SZXRyeUlkKSB7XG4gICAgICAgIHJldHJ5Q291bnQuY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCByZXRyeUlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMWU0KTtcbiAgICAgIGxhc3RSZXRyeUlkLmN1cnJlbnQgPSByZXRyeUlkO1xuICAgICAgaWYgKG9wdHM/Lm9uU3RhcnQpXG4gICAgICAgIG9wdHMub25TdGFydCgpO1xuICAgICAgc3RhdHVzLmN1cnJlbnQgPSBcInBlbmRpbmdcIjtcbiAgICAgIHNldEV4ZWN1dGluZyh0cnVlKTtcbiAgICAgIGxldCBkYXRhLCBlcnI7XG4gICAgICBhd2FpdCBzZXJ2ZXJBY3Rpb24oaW5wdXQsIG92ZXJyaWRlRGF0YSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIFtkYXRhLCBlcnJdID0gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsZXQgcmV0cnlEZWxheSA9IGdldFJldHJ5RGVsYXkob3B0cz8ucmV0cnksIHJldHJ5Q291bnQuY3VycmVudCwgZXJyKTtcbiAgICAgICAgaWYgKHJldHJ5RGVsYXkgPj0gMCkge1xuICAgICAgICAgIHJldHJ5Q291bnQuY3VycmVudCArPSAxO1xuICAgICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShcbiAgICAgICAgICAgIChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaW50ZXJuYWxFeGVjdXRlKGlucHV0LCBvdmVycmlkZURhdGEsIHtcbiAgICAgICAgICAgICAgICAuLi5hcmdzIHx8IHt9LFxuICAgICAgICAgICAgICAgIGlzRnJvbVJldHJ5SWQ6IHJldHJ5SWRcbiAgICAgICAgICAgICAgfSkudGhlbihyZXNvbHZlKTtcbiAgICAgICAgICAgIH0sIHJldHJ5RGVsYXkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkUmVzdWx0LnN0YXR1cyA9PT0gXCJmaWxsZWRcIikge1xuICAgICAgICAgIHNldFJlc3VsdChvbGRSZXN1bHQucmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRSZXN1bHQoe1xuICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgIHN0YXR1czogXCJlcnJvclwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0T2xkUmVzdWx0KHtcbiAgICAgICAgICBzdGF0dXM6IFwiZW1wdHlcIixcbiAgICAgICAgICByZXN1bHQ6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmN1cnJlbnQgPSBcImVycm9yXCI7XG4gICAgICAgIHNldEV4ZWN1dGluZyhmYWxzZSk7XG4gICAgICAgIHJldHVybiBbZGF0YSwgZXJyXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgZXJyb3I6IHZvaWQgMCxcbiAgICAgICAgZGF0YTogZGF0YSA/PyB2b2lkIDAsXG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCJcbiAgICAgIH07XG4gICAgICBzZXRSZXN1bHQocmVzKTtcbiAgICAgIHNldE9sZFJlc3VsdCh7XG4gICAgICAgIHN0YXR1czogXCJlbXB0eVwiLFxuICAgICAgICByZXN1bHQ6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBzdGF0dXMuY3VycmVudCA9IFwic3VjY2Vzc1wiO1xuICAgICAgc2V0RXhlY3V0aW5nKGZhbHNlKTtcbiAgICAgIHJldHVybiBbZGF0YSwgZXJyXTtcbiAgICB9LFxuICAgIFtzZXJ2ZXJBY3Rpb25dXG4gICk7XG4gIGNvbnN0IGV4ZWN1dGUgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoLi4ub3B0czIpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBleGVjdXRlUmVmLmN1cnJlbnQgPSByZXNvbHZlO1xuICAgICAgICBzdGFydFRyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICAgIGludGVybmFsRXhlY3V0ZShvcHRzMlswXSwgbWVyZ2VQb3NzaWJsZU9iamVjdHMoYmluZEFyZ3MsIG9wdHMyWzFdKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbaW50ZXJuYWxFeGVjdXRlXVxuICApO1xuICBjb25zdCBleGVjdXRlRm9ybUFjdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICguLi5vcHRzMikgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHN0YXJ0VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgICAgaW50ZXJuYWxFeGVjdXRlKG9wdHMyWzBdLCBiaW5kQXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgICBleGVjdXRlUmVmLmN1cnJlbnQgPSByZXNvbHZlO1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbaW50ZXJuYWxFeGVjdXRlXVxuICApO1xuICBjb25zdCBzZXRPcHRpbWlzdGljID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGZuKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZXZhbHVhdGVPcHRpbWlzdGljSW5wdXQoXG4gICAgICAgIGZuLFxuICAgICAgICBvbGRSZXN1bHRSZWYuY3VycmVudCxcbiAgICAgICAgcmVzdWx0UmVmLmN1cnJlbnRcbiAgICAgICk7XG4gICAgICBpZiAob2xkUmVzdWx0LnN0YXR1cyA9PT0gXCJlbXB0eVwiKSB7XG4gICAgICAgIHNldE9sZFJlc3VsdCh7XG4gICAgICAgICAgc3RhdHVzOiBcImZpbGxlZFwiLFxuICAgICAgICAgIHJlc3VsdDogeyAuLi5yZXN1bHQgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNldFJlc3VsdCh7XG4gICAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICAgIGRhdGE6IGRhdGEgPz8gdm9pZCAwLFxuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtleGVjdXRlXVxuICApO1xuICBjb25zdCByZXNldCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRSZXN1bHQoZ2V0RW1wdHlSZXN1bHQoKSk7XG4gICAgc2V0T2xkUmVzdWx0KGdldEVtcHR5T2xkUmVzdWx0KCkpO1xuICAgIHNldEV4ZWN1dGluZyhmYWxzZSk7XG4gICAgc3RhdHVzLmN1cnJlbnQgPSBcImlkbGVcIjtcbiAgICBsYXN0UmV0cnlJZC5jdXJyZW50ID0gMDtcbiAgICByZXRyeUNvdW50LmN1cnJlbnQgPSAwO1xuICB9LCBbXSk7XG4gIGNvbnN0IGlzUnVubmluZ0NhbGxiYWNrcyA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUNhbGxiYWNrcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWV4ZWN1dGVSZWYuY3VycmVudCB8fCBpc1J1bm5pbmdDYWxsYmFja3MuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpc1J1bm5pbmdDYWxsYmFja3MuY3VycmVudCA9IHRydWU7XG4gICAgaWYgKHN0YXR1cy5jdXJyZW50ID09PSBcInN1Y2Nlc3NcIikge1xuICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50Py4oW3Jlc3VsdFJlZi5jdXJyZW50LmRhdGEsIG51bGxdKTtcbiAgICAgIG9wdHM/Lm9uU3VjY2Vzcz8uKHtcbiAgICAgICAgZGF0YTogcmVzdWx0UmVmLmN1cnJlbnQuZGF0YVxuICAgICAgfSk7XG4gICAgICBvcHRzPy5vbkZpbmlzaD8uKFtyZXN1bHRSZWYuY3VycmVudC5kYXRhLCBudWxsXSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMuY3VycmVudCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICBleGVjdXRlUmVmLmN1cnJlbnQ/LihbbnVsbCwgcmVzdWx0UmVmLmN1cnJlbnQuZXJyb3JdKTtcbiAgICAgIG9wdHM/Lm9uRXJyb3I/Lih7XG4gICAgICAgIGVycjogcmVzdWx0UmVmLmN1cnJlbnQuZXJyb3JcbiAgICAgIH0pO1xuICAgICAgb3B0cz8ub25GaW5pc2g/LihbbnVsbCwgcmVzdWx0UmVmLmN1cnJlbnQuZXJyb3JdKTtcbiAgICB9XG4gICAgZXhlY3V0ZVJlZi5jdXJyZW50ID0gdm9pZCAwO1xuICAgIHN0YXR1cy5jdXJyZW50ID0gXCJpZGxlXCI7XG4gICAgaXNSdW5uaW5nQ2FsbGJhY2tzLmN1cnJlbnQgPSBmYWxzZTtcbiAgfSwgW10pO1xuICBjb25zdCBpc1BlbmRpbmcgPSBpc1RyYW5zaXRpb25pbmcgfHwgaXNFeGVjdXRpbmc7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzUGVuZGluZylcbiAgICAgIHJldHVybjtcbiAgICBoYW5kbGVDYWxsYmFja3MoKTtcbiAgfSwgW3N0YXR1cy5jdXJyZW50LCBpc1BlbmRpbmddKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGV4ZWN1dGVSZWYuY3VycmVudCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGhhbmRsZUNhbGxiYWNrcygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgY29uc3QgZmluYWwgPSBjYWxjdWxhdGVSZXN1bHRGcm9tU3RhdGUoe1xuICAgIGlzUGVuZGluZyxcbiAgICBvbGRSZXN1bHQsXG4gICAgcmVzdWx0OiByZXN1bHRSZWYuY3VycmVudCxcbiAgICBwZXJzaXN0RGF0YVdoaWxlUGVuZGluZzogb3B0cz8ucGVyc2lzdERhdGFXaGlsZVBlbmRpbmcsXG4gICAgcGVyc2lzdEVycm9yV2hpbGVQZW5kaW5nOiBvcHRzPy5wZXJzaXN0RXJyb3JXaGlsZVBlbmRpbmdcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgLi4uZmluYWwsXG4gICAgcmVzZXQsXG4gICAgZXhlY3V0ZSxcbiAgICBzZXRPcHRpbWlzdGljLFxuICAgIGV4ZWN1dGVGb3JtQWN0aW9uXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgdXNlU2VydmVyQWN0aW9uXG59O1xuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VUcmFuc2l0aW9uIiwiZXZhbHVhdGVPcHRpbWlzdGljSW5wdXQiLCJmbiIsIm9sZFJlc3VsdCIsInJlc3VsdCIsImlzRnVuY3Rpb24iLCJ2YWx1ZSIsInN0YXR1cyIsImRhdGEiLCJjYWxjdWxhdGVSZXN1bHRGcm9tU3RhdGUiLCJzdGF0ZSIsImlzUGVuZGluZyIsImlzT3B0aW1pc3RpYyIsInBlcnNpc3REYXRhV2hpbGVQZW5kaW5nIiwiaXNFcnJvciIsImVycm9yIiwicGVyc2lzdEVycm9yV2hpbGVQZW5kaW5nIiwiaXNTdWNjZXNzIiwiZ2V0RW1wdHlSZXN1bHQiLCJpbml0aWFsRGF0YSIsImdldEVtcHR5T2xkUmVzdWx0IiwiZ2V0UmV0cnlEZWxheSIsInJldHJ5Q29uZmlnIiwicmV0cnlDb3VudCIsImVyciIsInNob3VsZFJldHJ5IiwibWF4QXR0ZW1wdHMiLCJyZXRyeURlbGF5IiwicmV0cnlEZWxheU9wdCIsImRlbGF5IiwibWVyZ2VQb3NzaWJsZU9iamVjdHMiLCJvYmoxIiwib2JqMiIsInVzZVNlcnZlckFjdGlvbiIsInNlcnZlckFjdGlvbiIsIm9wdHMiLCJiaW5kQXJncyIsImJpbmQiLCIkc2V0UmVzdWx0IiwicmVzdWx0UmVmIiwiJHNldE9sZFJlc3VsdCIsIm9sZFJlc3VsdFJlZiIsImxhc3RSZXRyeUlkIiwiZXhlY3V0ZVJlZiIsImlzVHJhbnNpdGlvbmluZyIsInN0YXJ0VHJhbnNpdGlvbiIsImlzRXhlY3V0aW5nIiwic2V0RXhlY3V0aW5nIiwic2V0UmVzdWx0IiwicmVzdWx0MiIsImN1cnJlbnQiLCJzZXRPbGRSZXN1bHQiLCJvbGRSZXN1bHQyIiwiaW50ZXJuYWxFeGVjdXRlIiwiaW5wdXQiLCJvdmVycmlkZURhdGEiLCJhcmdzIiwiaXNGcm9tUmV0cnlJZCIsIm1lc3NhZ2UiLCJzdGFjayIsIm5hbWUiLCJjb2RlIiwicmV0cnlJZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm9uU3RhcnQiLCJ0aGVuIiwicmVzcG9uc2UiLCJyZXRyeSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInJlcyIsImV4ZWN1dGUiLCJvcHRzMiIsImV4ZWN1dGVGb3JtQWN0aW9uIiwic2V0T3B0aW1pc3RpYyIsInJlc2V0IiwiaXNSdW5uaW5nQ2FsbGJhY2tzIiwiaGFuZGxlQ2FsbGJhY2tzIiwib25TdWNjZXNzIiwib25GaW5pc2giLCJvbkVycm9yIiwiZmluYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zsa-react/dist/index.mjs\n");

/***/ })

};
;